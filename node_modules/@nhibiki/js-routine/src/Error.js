class RoutineError extends Error {

    constructor(msg="Unexpected Error!", code=RoutineError.ERROR.UNKNOWN) {
        if (msg instanceof Error) super(msg.message);
        else super(msg);
        this.msg  = msg;
        this.code = code;
    }

    toString() {
        return `[JSRoutine] Error: ${this.code}\n${this.msg}`;
    }

    // print error into console
    log() {
        console.error(this.toString());
        return this;
    }

    /**
     * another way to build Error, support avoiding throw yet just print
     * @param {String} msg Error message
     * @param {Number} code Error code
     * @param {Boolean} _throw print to console only or throw
     */
    static Raise(msg="", code=RoutineError.ERROR.UNKNOWN, _throw=true) {
        if (_throw) throw new RoutineError(msg, code);
        else return new RoutineError(msg, code).log();
    }

    /**
     * another way to build Error from Error
     * @param {Error} Error
     * @param {Number} code Error code
     * @param {Boolean} _throw print to console only or throw
     */
    static From(error, code=RoutineError.ERROR.UNKNOWN, _throw=true) {
        if (error instanceof Error) RoutineError.Raise(error.message, code, _throw);
        else RoutineError.Raise(error, code, _throw);
    }

}

RoutineError.ERROR = {
    UNKNOWN: 0,
    WRONG_TYPE: 1,
    TIMEOUT: 100,
};

module.exports = RoutineError;